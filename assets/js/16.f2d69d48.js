(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{273:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"深入理解category"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入理解category","aria-hidden":"true"}},[s._v("#")]),s._v(" 深入理解Category")]),s._v(" "),n("h2",{attrs:{id:"一、category简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、category简介","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、Category简介")]),s._v(" "),n("blockquote",[n("p",[s._v("You use categories to define additional methods of an existing class—even one whose source code is unavailable to you—without subclassing.")])]),s._v(" "),n("p",[s._v("Category是Objective-C 2.0之后添加的语言特性。它的主要作用是在不改变原有类的前提下，动态地给这个类添加一些方法。这样可以做到不访问源码又能扩展其功能的目的，且保证了原始类拥有较小的体积，很多开源框架都应用了这一特性。")]),s._v(" "),n("h2",{attrs:{id:"二、使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、使用场景","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、使用场景")]),s._v(" "),n("ul",[n("li",[s._v("给现有类添加新的方法（常用）")]),s._v(" "),n("li",[s._v("声明私有方法")]),s._v(" "),n("li",[s._v("模拟多继承")]),s._v(" "),n("li",[s._v("把framework的私有方法公开")])]),s._v(" "),n("h2",{attrs:{id:"三、分析runtime源码下的category实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、分析runtime源码下的category实现原理","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、分析runtime源码下的Category实现原理")]),s._v(" "),n("p",[s._v("下载最新版 "),n("a",{attrs:{href:"http://opensource.apple.com/tarballs/objc4/",target:"_blank",rel:"noopener noreferrer"}},[s._v("runtime"),n("OutboundLink")],1),s._v(" 源码，本例用的"),n("code",[s._v("objc4-706.tar.gz")]),s._v("。打开runtime文件夹下的"),n("code",[s._v("objc-runtime-new.h")]),s._v("，可以看到category的定义。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("struct category_t {\n    const char *name; //类名字\n    classref_t cls; // 类\n    struct method_list_t *instanceMethods; // 实例方法列表\n    struct method_list_t *classMethods; // 类方法列表\n    struct protocol_list_t *protocols; // 协议列表\n    struct property_list_t *instanceProperties;  // 实例属性列表（添加到类上）\n    // Fields below this point are not always present on disk.\n    struct property_list_t *_classProperties; // 类属性列表（添加到元类上），这里说了它并不总是存在当前的磁盘上。（为什么这样我还没想通）\n    method_list_t *methodsForMeta(bool isMeta) {\n        if (isMeta) return classMethods;\n        else return instanceMethods;\n    } // 元类方法列表\n\n    property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi); // 元类属性列表\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("从这个结构体看出category可以添加实例方法和类方法，实现协议，添加属性。\n下面打开runtime文件夹下的"),n("code",[s._v("objc-runtime-new.mm")]),s._v("，找到"),n("code",[s._v("void _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)")]),s._v("这个方法，下面这段是关键部分")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    // Process this category. \n            // First, register the category with its target class. \n            // Then, rebuild the class\'s method lists (etc) if \n            // the class is realized. \n            bool classExists = NO;\n            if (cat->instanceMethods ||  cat->protocols  \n                ||  cat->instanceProperties) \n            {\n                addUnattachedCategoryForClass(cat, cls, hi);\n                if (cls->isRealized()) {\n                    remethodizeClass(cls);\n                    classExists = YES;\n                }\n                if (PrintConnecting) {\n                    _objc_inform("CLASS: found category -%s(%s) %s", \n                                 cls->nameForLogging(), cat->name, \n                                 classExists ? "on existing class" : "");\n                }\n            }\n\n            if (cat->classMethods  ||  cat->protocols  \n                ||  (hasClassProperties && cat->_classProperties)) \n            {\n                addUnattachedCategoryForClass(cat, cls->ISA(), hi);\n                if (cls->ISA()->isRealized()) {\n                    remethodizeClass(cls->ISA());\n                }\n                if (PrintConnecting) {\n                    _objc_inform("CLASS: found category +%s(%s)", \n                                 cls->nameForLogging(), cat->name);\n                }\n            }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[s._v("这里有必要了解一下什么是元类，"),n("a",{attrs:{href:"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0ahUKEwjEh-HltMfSAhXLiFQKHW0QB-EQFggaMAA&url=http%3A%2F%2Fios.jobbole.com%2F81657%2F&usg=AFQjCNF1YjPaxwmESdhd4A3RMOoatcJpCw&sig2=XfnhX-25WbwbtXEeaaG6Yw&cad=rja",target:"_blank",rel:"noopener noreferrer"}},[s._v("Objective-C 中的元类（meta class）是什么？"),n("OutboundLink")],1),s._v("，"),n("a",{attrs:{href:"http://blog.leichunfeng.com/blog/2015/04/25/objective-c-object-model/",target:"_blank",rel:"noopener noreferrer"}},[s._v("《Objective-C 对象模型》"),n("OutboundLink")],1),s._v("\n这段代码的主要作用是")]),s._v(" "),n("ul",[n("li",[s._v("注册category和他的主类，也就是把category的实例方法、协议以及属性添加到类上，把category的类方法和协议以及属性添加到类的metaclass上")]),s._v(" "),n("li",[s._v("如果类已经实现则重建它的方法列表")])]),s._v(" "),n("p",[s._v("根据"),n("code",[s._v("remethodizeClass(cls)")]),s._v("和"),n("code",[s._v("remethodizeClass(cls->ISA())")]),s._v("这个方法继续往下找，可以看到"),n("code",[s._v("remethodizeClass")]),s._v("方法的实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('static void remethodizeClass(Class cls)\n{\n    category_list *cats;\n    bool isMeta;\n\n    runtimeLock.assertWriting();\n\n    isMeta = cls->isMetaClass();\n\n    // Re-methodizing: check for more categories\n    if ((cats = unattachedCategoriesForClass(cls, false/*not realizing*/))) {\n        if (PrintConnecting) {\n            _objc_inform("CLASS: attaching categories to class \'%s\' %s", \n                         cls->nameForLogging(), isMeta ? "(meta)" : "");\n        }\n        \n        attachCategories(cls, cats, true /*flush caches*/);        \n        free(cats);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("分析这段代码发现这还不是最终的方法，继续顺藤摸瓜找到"),n("code",[s._v("attachCategories(cls, cats, true /*flush caches*/)")]),s._v("这个方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// Attach method lists and properties and protocols from categories to a class.\n// Assumes the categories in cats are all loaded and sorted by load order, \n// oldest categories first.\nstatic void \nattachCategories(Class cls, category_list *cats, bool flush_caches)\n{\n    if (!cats) return;\n    if (PrintReplacedMethods) printReplacements(cls, cats);\n\n    bool isMeta = cls->isMetaClass();\n\n    // fixme rearrange to remove these intermediate allocations\n    method_list_t **mlists = (method_list_t **)\n        malloc(cats->count * sizeof(*mlists));\n    property_list_t **proplists = (property_list_t **)\n        malloc(cats->count * sizeof(*proplists));\n    protocol_list_t **protolists = (protocol_list_t **)\n        malloc(cats->count * sizeof(*protolists));\n\n    // Count backwards through cats to get newest categories first\n    int mcount = 0;\n    int propcount = 0;\n    int protocount = 0;\n    int i = cats->count;\n    bool fromBundle = NO;\n    while (i--) {\n        auto& entry = cats->list[i];\n\n        method_list_t *mlist = entry.cat->methodsForMeta(isMeta);\n        if (mlist) {\n            mlists[mcount++] = mlist;\n            fromBundle |= entry.hi->isBundle();\n        }\n\n        property_list_t *proplist = \n            entry.cat->propertiesForMeta(isMeta, entry.hi);\n        if (proplist) {\n            proplists[propcount++] = proplist;\n        }\n\n        protocol_list_t *protolist = entry.cat->protocols;\n        if (protolist) {\n            protolists[protocount++] = protolist;\n        }\n    }\n\n    auto rw = cls->data();\n\n    prepareMethodLists(cls, mlists, mcount, NO, fromBundle);\n    rw->methods.attachLists(mlists, mcount);\n    free(mlists);\n    if (flush_caches  &&  mcount > 0) flushCaches(cls);\n\n    rw->properties.attachLists(proplists, propcount);\n    free(proplists);\n\n    rw->protocols.attachLists(protolists, protocount);\n    free(protolists);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br")])]),n("p",[s._v("通过注释就可以看到，这个方法才是真正的把catrgory的方法、属性、协议整合到主类中的。这里的整合其实是合并在一起的，并没有真正覆盖掉原来主类的方法，而是添加到原先方法的前面，掉用的时候发现前面的方法就会执行并且停止查询了，所以给了人们category可以''覆盖''主类方法的错觉。其实只要顺着方法列表找到最后一个对应名字的方法，也是可以调用原来类的方法的。\n下面就做个实验验证一下：本段代码参考"),n("a",{attrs:{href:"http://tech.meituan.com/DiveIntoCategory.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入理解Objective-C：Category"),n("OutboundLink")],1),s._v("，写一个MyClass的分类打印myAdditionClass。这个小测验也可以在我的"),n("a",{attrs:{href:"https://github.com/zcLu/CategoryDemo",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub"),n("OutboundLink")],1),s._v("找到。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#import "MyClass.h"\n\n@implementation MyClass\n\n- (void)printName {\n    NSLog(@"myClass");\n}\n\n@end\n\n#import "MyClass+MyAddition.h"\n\n@implementation MyClass (MyAddition)\n\n- (void)printName {\n    NSLog(@"myAdditionClass");\n}\n\n@end\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("下面这段就是找主类中的方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    MyClass *class = [[MyClass alloc]init];\n    [class printName]; //执行分类的方法打印的是myAdditionClass\n    \n    \n    Class currentClass = [MyClass class];\n    MyClass *my = [[MyClass alloc] init];\n    if (currentClass) {\n        unsigned int methodCount;\n        Method *methodList = class_copyMethodList(currentClass, &methodCount);// 方法列表（包含主类和分类中的方法）\n        IMP lastImp = NULL;\n        SEL lastSel = NULL;\n        \n        Method method = methodList[methodCount-1]; // 直接找到最后一个方法，因为我们已经知道了方法列表中分类的方法在主类方法的前面。\n        NSString *methodName = [NSString stringWithCString:sel_getName(method_getName(method))\n                                                  encoding:NSUTF8StringEncoding]; // 方法名\n        if ([@"printName" isEqualToString:methodName]) {// 找到我们需要找的方法，得到方法实现的指针和方法名的指针\n            lastImp = method_getImplementation(method);\n            lastSel = method_getName(method);\n        }\n        \n        typedef void (*fn)(id,SEL); // 定义一个函数\n        \n        if (lastImp != NULL) {\n            fn f = (fn)lastImp;\n            f(my,lastSel); // 执行找到的主类的方法，打印的是myClass\n        }\n        free(methodList);\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[n("strong",[s._v("这里需要注意的一点就是：虽然可以这么做，但是最好不要用分类覆盖主类的方法，如果真的有这种需求，应该选择创建子类。现在去分类中看的话可以看到"),n("code",[s._v("category is implementing a method which will also be implemented by its primary class")]),s._v("这个警告，分类中的这个方法主类已经实现了，所以是不推荐这么做的。")])]),s._v(" "),n("h2",{attrs:{id:"四、参考链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、参考链接","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、参考链接")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://blog.leichunfeng.com/blog/2015/05/18/objective-c-category-implementation-principle/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Objective-C Category 的实现原理"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"http://tech.meituan.com/DiveIntoCategory.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入理解Objective-C：Category"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0ahUKEwjEh-HltMfSAhXLiFQKHW0QB-EQFggaMAA&url=http%3A%2F%2Fios.jobbole.com%2F81657%2F&usg=AFQjCNF1YjPaxwmESdhd4A3RMOoatcJpCw&sig2=XfnhX-25WbwbtXEeaaG6Yw&cad=rja",target:"_blank",rel:"noopener noreferrer"}},[s._v("Objective-C 中的元类（meta class）是什么？"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"http://blog.leichunfeng.com/blog/2015/04/25/objective-c-object-model/",target:"_blank",rel:"noopener noreferrer"}},[s._v("《Objective-C 对象模型》"),n("OutboundLink")],1)])]),s._v(" "),n("Vssue")],1)}),[],!1,null,null,null);t.default=e.exports}}]);